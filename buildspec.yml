version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: us-east-1
    AWS_ACCOUNT_ID: "869620365293"
    IMAGE_REPO_NAME: query-profiler-frontend
    IMAGE_TAG: latest
    EKS_CLUSTER_NAME: query-profiler-dashboard
    EKS_KUBECTL_ROLE_ARN: arn:aws:iam::869620365293:role/CodeBuildKubectlRole

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo Installing global dependencies...

  pre_build:
    commands:
      - echo Installing dependencies...
      - cd query-profiler-frontend && npm install

  build:
    commands:
      - echo Build started on `date`
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo Building the React application...
      - export REACT_APP_API_URL=$API_URL && npm run build
      - echo Running tests...
      - npm test -- --coverage --ci --watchAll=false
      - echo Checking build output...
      - ls -la build/
      - cd ..
      - echo Current directory contents:
      - ls -la
      - echo Query profiler frontend contents:
      - ls -la query-profiler-frontend/
      - echo Creating Dockerfile...
      - |
        cat > query-profiler-frontend/Dockerfile << 'EOF'
        FROM nginx:alpine
        COPY build /usr/share/nginx/html
        RUN echo 'events { worker_connections 1024; } http { include /etc/nginx/mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; gzip on; gzip_vary on; gzip_min_length 1024; gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json; server { listen 80; server_name localhost; root /usr/share/nginx/html; index index.html index.htm; location / { try_files $uri $uri/ /index.html; } location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ { expires 1y; add_header Cache-Control "public, immutable"; } add_header X-Frame-Options "SAMEORIGIN" always; add_header X-Content-Type-Options "nosniff" always; add_header X-XSS-Protection "1; mode=block" always; location /health { access_log off; return 200 "healthy\n"; add_header Content-Type text/plain; } } }' > /etc/nginx/nginx.conf
        EXPOSE 80
        HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1
        CMD ["nginx", "-g", "daemon off;"]
        EOF
      - echo Building the Docker image...
      - echo "About to run: docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG query-profiler-frontend/"
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG query-profiler-frontend/ --no-cache
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
      - echo Pushing the Docker image...
      - docker push $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Image pushed to $REPOSITORY_URI:$IMAGE_TAG
      - echo "IMAGE_URI=$REPOSITORY_URI:$IMAGE_TAG" > image_uri.txt
      - echo Storing image URI in Parameter Store...
      - aws ssm put-parameter --name "/query-profiler/latest-image-uri" --value "$REPOSITORY_URI:$IMAGE_TAG" --type String --overwrite
      - echo Triggering infrastructure deployment...
      - DEPLOY_BUILD_ID=$(aws codebuild start-build --project-name query-profiler-infrastructure-deploy --environment-variables-override name=IMAGE_URI,value=$REPOSITORY_URI:$IMAGE_TAG --query 'build.id' --output text)
      - echo "Infrastructure deployment started with build ID $DEPLOY_BUILD_ID"

artifacts:
  files:
    - query-profiler-frontend/build/**/*

cache:
  paths:
    - 'query-profiler-frontend/node_modules/**/*'